// Breakpoint Small
//
// @include breakpoint-sm { code.. }
//
// Breakpoint for small devices (breakpoint-sm) (min-width: 768px)
//
// Styleguide _Nuclides.Mixins.Breakpoint

@mixin breakpoint-sm {
	@media (min-width: 768px) {
		@content;
	}
}

// Breakpoint Medium
//
// @include breakpoint-md { code.. }
//
// Breakpoint for medium devices (md) (min-width: 992px)
//
// Styleguide _Nuclides.Mixins.Breakpoint

@mixin breakpoint-md {
	@media (min-width: 992px) {
		@content;
	}
}

// Breakpoint Large
//
// @include breakpoint-lg { code.. }
//
// Breakpoint for large devices (lg) (min-width: 1200px)
//
// Styleguide _Nuclides.Mixins.Breakpoint

@mixin breakpoint-lg {
	@media (min-width: 1200px) {
		@content;
	}
}

// Placeholder
//
// @include placeholder { code.. }
//
// Set the placehold styling for a input element
//
// Styleguide _Nuclides.Mixins.Placeholder

@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;
	}

	&:-moz-placeholder { /* Firefox 18- */
		@content;
	}

	&::-moz-placeholder {  /* Firefox 19+ */
		@content;
	}

	&:-ms-input-placeholder {
		@content;
	}
}

@function calculaterem($size) {
	$remSize: $size / 16px;

	@return $remSize * 1rem;
}

// Font Size
//
// @include font-size($size);
//
// Set the font-size in pixels and it will calculate the font-size in rem.
//
// $size = 16px - Font size in pixels.
//
// Styleguide _Nuclides.Mixins.FontSize

@mixin font-size($size) {
	font-size: $size;
	font-size: calculaterem($size);
}

// Line height
//
// line-height: line-height(55px, 70px);
//
// Set the line-height based on the font-size and line-height in pixels
//
// $font-size = 55px - Font size in pixels.
// $line-height = 70px - Line height in pixels.
// Output: 1.27273
//
// Styleguide _Nuclides.Mixins.LineHeight

@function line-height($font-size, $line-height) {
	@return $line-height / $font-size * 1em;
}

// Image ratio
//
// @include image-ratio($x, $y);
//
// Calculating the padding-bottom based on image ratio
// For example X:Y
// 4:3 ratio
// 16:9 ratio
// 21:9 ratio
//
// $x (int) 16 - Width of the ratio
// $y (int) 9 - Height of the ratio
//
// Styleguide _Nuclides.Mixins.ImageRatio

@mixin image-ratio($x, $y) {
	position: relative;
	height: 0;
	padding-bottom: calc(#{$y} / #{$x} * 100%);
	overflow: hidden;

	@if type-of($x) != 'number' {
		@error ' Variable `$x` should be a integer.';
	}

	@if type-of($y) != 'number' {
		@error ' Variable `$y` should be a integer.';
	}
}

// Center element
//
// @include center-element();
//
// Enables perfect centering on the X and Y axis
// Can be used for any element like images, icons etc
//
// Styleguide _Nuclides.Mixins.CenterElement

@mixin center-element() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translateY(-50%) translateX(-50%);
}

// Focus style
//
// @include focus-style;
//
// Adds properties of focus styling
//
// Styleguide _Nuclides.Mixins.FocusStyle

@mixin focus-style() {
	outline: 2px solid;
	outline-color: #14a1c8;
	animation: outline-animation linear 0.1s;
	animation-fill-mode: forwards;

	@-webkit-keyframes outline-animation {
		0% { outline-offset: 0.5em; }
		100% { outline-offset: 0; }
	}

	@-moz-keyframes outline-animation {
		0% { outline-offset: 0.5em; }
		100% { outline-offset: 0; }
	}

	@-o-keyframes outline-animation {
		0% { outline-offset: 0.5em; }
		100% { outline-offset: 0; }
	}

	@keyframes outline-animation {
		0% { outline-offset: 0.5em; }
		100% { outline-offset: 0; }
	}
}
